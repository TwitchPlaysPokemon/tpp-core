// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using MusicCat.Models;
using MusicCat.Musiclibrary.Songs.Item;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace MusicCat.Musiclibrary.Songs
{
    /// <summary>
    /// Builds and executes requests for operations under \musiclibrary\songs
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SongsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the MusicCat.musiclibrary.songs.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::MusicCat.Musiclibrary.Songs.Item.SongsItemRequestBuilder"/></returns>
        public global::MusicCat.Musiclibrary.Songs.Item.SongsItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::MusicCat.Musiclibrary.Songs.Item.SongsItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::MusicCat.Musiclibrary.Songs.SongsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SongsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/musiclibrary/songs{?category*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::MusicCat.Musiclibrary.Songs.SongsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SongsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/musiclibrary/songs{?category*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns all currently enabled songs in the library, optionally filtered to one type
        /// </summary>
        /// <returns>A List&lt;global::MusicCat.Models.Song&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::MusicCat.Models.Song>?> GetAsync(Action<RequestConfiguration<global::MusicCat.Musiclibrary.Songs.SongsRequestBuilder.SongsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::MusicCat.Models.Song>> GetAsync(Action<RequestConfiguration<global::MusicCat.Musiclibrary.Songs.SongsRequestBuilder.SongsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::MusicCat.Models.Song>(requestInfo, global::MusicCat.Models.Song.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns all currently enabled songs in the library, optionally filtered to one type
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::MusicCat.Musiclibrary.Songs.SongsRequestBuilder.SongsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::MusicCat.Musiclibrary.Songs.SongsRequestBuilder.SongsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::MusicCat.Musiclibrary.Songs.SongsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::MusicCat.Musiclibrary.Songs.SongsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::MusicCat.Musiclibrary.Songs.SongsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns all currently enabled songs in the library, optionally filtered to one type
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SongsRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("category")]
            public string? Category { get; set; }
#nullable restore
#else
            [QueryParameter("category")]
            public string Category { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
